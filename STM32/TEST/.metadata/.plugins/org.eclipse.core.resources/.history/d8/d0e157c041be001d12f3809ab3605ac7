/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "can.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
extern uint8_t  USART1_RX_BUF[200];
extern uint8_t  USART1_RX_FLAG;
extern uint32_t USART1_RX_CNT;
extern uint8_t  USART1_RX_TEMP[1];

extern uint8_t CAN1_Rx_data[8];
extern uint8_t CAN1_Tx_data[8];
extern uint8_t CAN2_Rx_data[8];
extern uint8_t CAN2_Tx_data[8];
extern uint8_t CAN_FLAG;


extern xyz_s16_t data_acc;
extern xyz_s16_t data_g;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  MX_SPI3_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
  DS33_Init();
  HAL_Delay(100);
  icm20602_init();
  HAL_UART_Receive_IT(&huart1,USART1_RX_TEMP, sizeof(USART1_RX_TEMP));

  uint8_t ID = 1;
  motor_enable(ID);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /*
	  LSM6_readAcc(1);
	  LSM6_readGyro(1);
	  printf("\nAcc: x:%d y:%d z:%d\n",data_acc.x,data_acc.y,data_acc.z);
	  printf("\nGyro: x:%d y:%d z:%d\n",data_g.x,data_g.y,data_g.z);
	  printf("\nAcc: x:%d y:%d z:%d\n",lis3mdl.Acc_I16.x,lis3mdl.Acc_I16.y,lis3mdl.Acc_I16.z);
	  printf("\nGyro: x:%d y:%d z:%d\n",lis3mdl.Gyro_I16.x,lis3mdl.Gyro_I16.y,lis3mdl.Gyro_I16.z);

	  icm20602_get_accel_adc();
	  icm20602_get_gyro_adc();
	  printf("\nAcc: x:%d y:%d z:%d\n",data_acc.x,data_acc.y,data_acc.z);
	  printf("\nGyro: x:%d y:%d z:%d\n",data_g.x,data_g.y,data_g.z);
	  printf("\nAcc: x:%d y:%d z:%d\n",lis3mdl.Acc_I16.x,lis3mdl.Acc_I16.y,lis3mdl.Acc_I16.z);
	  printf("\nGyro: x:%d y:%d z:%d\n",lis3mdl.Gyro_I16.x,lis3mdl.Gyro_I16.y,lis3mdl.Gyro_I16.z);
	*/
//	CAN_TxMeg(ID, TxData,8);

	HAL_Delay(1000);
	printf("\nID:%d positon:%f velocity:%f current:%f\n",motor1.ID,motor1.position,motor1.velocity,motor1.current);
	if( USART1_RX_FLAG){
//		printf("\nUART1: ");
//		HAL_UART_Transmit(&huart1, USART1_RX_BUF, USART1_RX_CNT, 0xff);

		if(USART1_RX_BUF[0]=='E'){
			motor_enable(ID);
		}
		if(USART1_RX_BUF[0]=='D'){
			motor_disable(ID);
		}
		if(USART1_RX_BUF[0]=='P'){
			int position = USART1_RX_BUF[1] - '0';
			pack_TX(ID, position, 0.1, 1, 0.2, 0);
		}

		for( int i = 0; i<USART1_RX_CNT; i ++){
			USART1_RX_BUF[i] = 0;
		}

		USART1_RX_CNT = 0;
		USART1_RX_FLAG = 0;
	}
	if(CAN_FLAG){
		motor_setdata(CAN_FLAG, CAN1_Rx_data);
		printf("\nID:%d positon:%f velocity:%f current:%f\n",motor1.ID,motor1.position,motor1.velocity,motor1.current);
		CAN_FLAG = 0;
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
