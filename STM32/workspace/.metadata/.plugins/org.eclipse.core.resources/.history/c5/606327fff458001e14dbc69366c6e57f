/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "can.h"
#include "dma.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DmaPrintf(const char *format,...)
{
	uint16_t len;
	va_list args;
	va_start(args,format);
	len = vsnprintf((char*)USART1_TX_BUF,sizeof(USART1_TX_BUF)+1,(char*)format,args);
	va_end(args);
	HAL_UART_Transmit_DMA(&huart1, USART1_TX_BUF, len);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  MX_SPI2_Init();
  MX_SPI3_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,USART1_RX_TEMP, sizeof(USART1_RX_TEMP));
  motor_init();

  	int cycleTime = 10;
	int led = 0;
	int led_flag = 0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  //MX_FREERTOS_Init();

  /* Start scheduler */
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	//LED Task
	if(led<(1000/cycleTime))  led++;
	else{
		led_flag=!led_flag;
		led = 0;
	}
	LEDRGB_RED(led_flag);
	LEDRGB_BLUE(!led_flag);



	//CAN Task
	motor_setCmd();
	motor_control();
	if(CAN_FLAG){
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f\n",motorState[0].ID,motorState[0].q,motorState[0].dq,motorState[0].tau);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f\n",motorState[1].ID,motorState[1].q,motorState[1].dq,motorState[1].tau);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f\n",motorState[2].ID,motorState[2].q,motorState[2].dq,motorState[2].tau);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f\n",motorState[3].ID,motorState[3].q,motorState[3].dq,motorState[3].tau);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f\n",motorState[4].ID,motorState[4].q,motorState[4].dq,motorState[4].tau);
		CAN_FLAG = 0;
	}

	if(cmd_FLAG){
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f %.1f %.1f\n",motorCmd[0].ID,motorCmd[0].q,motorCmd[0].dq,motorCmd[0].tau,motorCmd[0].Kp,motorCmd[0].Kd);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f %.1f %.1f\n",motorCmd[1].ID,motorCmd[1].q,motorCmd[1].dq,motorCmd[1].tau,motorCmd[1].Kp,motorCmd[1].Kd);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f %.1f %.1f\n",motorCmd[2].ID,motorCmd[2].q,motorCmd[2].dq,motorCmd[2].tau,motorCmd[2].Kp,motorCmd[2].Kd);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f %.1f %.1f\n",motorCmd[3].ID,motorCmd[3].q,motorCmd[3].dq,motorCmd[3].tau,motorCmd[3].Kp,motorCmd[3].Kd);
		HAL_Delay(3);
		DmaPrintf("%d %.1f %.1f %.1f %.1f %.1f\n",motorCmd[4].ID,motorCmd[4].q,motorCmd[4].dq,motorCmd[4].tau,motorCmd[4].Kp,motorCmd[4].Kd);
	}

	//UART Task
	if(USART1_RX_FLAG){
		HAL_Delay(100);
		if(USART1_RX_BUF[0]=='E'){
			motor_enable_all();
		}
		if(USART1_RX_BUF[0]=='D'){
			motor_disable(1);motor_disable(2);motor_disable(3);motor_disable(4);
		}
		if(USART1_RX_BUF[0]=='Z'){
			motor_setzero(1);motor_setzero(2);motor_setzero(3);motor_setzero(4);
		}
		if(USART1_RX_BUF[0]=='H'){
			DmaPrintf("hello world!\n");
		}
		if(USART1_RX_BUF[0]=='C'){
			cmd_FLAG = !cmd_FLAG;
		}


		for( int i = 0; i<USART1_RX_CNT; i ++){
			USART1_RX_BUF[i] = 0;
		}
		USART1_RX_CNT = 0;
		USART1_RX_FLAG = 0;
	}

	//SPI_Task
//	if(spi_rx_cnt_all!=0){
//		//slave_rx(spi_rx,spi_rx_cnt);
//		spi_rx_cnt_all=0;
//		HAL_Delay(2);
//		DmaPrintf("RX:  ");
//		HAL_Delay(2);
//		for(int i=0;i<spi_tx_cnt;i++){
//			DmaPrintf("%02x  ",spi_rx_buf[i]);
//			HAL_Delay(1);
////			spi_rx_buf[i]=0;
//		}
//		DmaPrintf("\n");
//	}


	HAL_Delay(cycleTime);



	/* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
